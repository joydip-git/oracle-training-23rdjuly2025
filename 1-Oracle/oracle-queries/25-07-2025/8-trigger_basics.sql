create or replace trigger employees_audit_trigger
after 
INSERT or UPDATE or DELETE
on employees
for each row
declare
    l_operation_type varchar2(10);
    l_emp_id number;
begin
    l_operation_type := case
    when INSERTING then 'inserted'
    when UPDATING then 'updated'
    when DELETING then 'deleted'
    end;
    
    l_emp_id :=case
    when INSERTING then :NEW.employee_id
    when UPDATING then :OLD.employee_id
    when DELETING then :OLD.employee_id
    end;
    
    insert into EMPLOYEES_AUDIT(operation_type,by_user,operation_date,record_id) values(l_operation_type,USER,SYSDATE,l_emp_id); 
    
end;

create table employees_audit(
    audit_id number generated by default as identity primary key,
    operation_type varchar2(10),
    by_user varchar2(30),
    operation_date date,
    record_id number
);

drop table employees_audit;

insert into employees(employee_id, first_name, last_name, email,manager_id) values(107,'abcd','xyz','abcd@gmail.com',100);

update employees set first_name='amitabh', last_name='bachchan' where employee_id=107;
delete from employees where employee_id=107;

create table departments(
    dept_id number generated by default as identity primary key,
    dept_name varchar2(10),
    employee_count number
);

alter table employees
add dept_id number;

alter table employees
add constraint fk_emp_dept foreign key (dept_id) references departments (dept_id);


insert into departments(dept_name, employee_count) values('HR',0);
insert into departments(dept_name, employee_count) values('EDU',0);

select * from employees;
update employees set dept_id=1 where employee_id between 100 and 102;
update employees set dept_id=2 where employee_id between 103 and 106;
update departments set departments.employee_count=3 where dept_id=1;
update departments set departments.employee_count=4 where dept_id=2;


create or replace trigger department_employee_trigger
after
INSERT or UPDATE of dept_id or DELETE 
on employees
for each row
declare   
begin    
    case 
        when INSERTING then 
           SP_UPDATE_DEPARTMENTS(1,:NEW.dept_id);             
        when UPDATING then
           SP_UPDATE_DEPARTMENTS(1,:NEW.dept_id);
           SP_UPDATE_DEPARTMENTS(-1,:OLD.dept_id);
        when DELETING then
           SP_UPDATE_DEPARTMENTS(-1,:OLD.dept_id);
    end case;
end;

update employees set dept_id=2, manager_id=103 where employee_id=101;
update employees set dept_id=1, manager_id=100 where employee_id=104;
--update employees set dept_id=2, manager_id=103 where employee_id=101;

select * from employees;
select * from departments;
select * from employees_audit;


create or replace procedure sp_update_departments(
    empcount IN number,
    deptid IN number
)
as
begin
    update departments set employee_count= employee_count+empcount where dept_id=deptid;
end;








