abstract class:
	DataAccess -> String readData()
	
	FileDataAcces -> String readData()
	DbDataAcces -> String readData()

interface:
	collection of ONLY abstract methods (including getter and setter)
	can't have any data member declaration
	can't have explicit constructor declaration
	by default members are abstract and public. no need to use those keywords.
	a class can implement multiple interfaces
	can't instantiate
	should be used as a contract of some concrete implementation. it helps to abstract the implementation.


abstract:
	collection of abstract methods (including getter and setter) as well as non-abstract methods
	can have any data member declaration
	can have explicit constructor declaration
	by default members are NOT abstract and NOT public. need to use those keywords.
	a class can't inherit from multiple classes
	can't instantiate
	should be used when the child classes do have data and some methods in common, where the methods do have different implementation in child classes.

class A{}
interface IA{}
interface IB{}
class B extends A, implements IA, IB{
}


one file -> one class/interface
create packages to segregate the types (models, data access layer, business layer, user interface, api layer etc.)
no public data member until and unless constant
always keep default and parameterized constructors in the class
always create getter and/or setter (depending on whether the data should be read-only or not) to expose private/protected data member value without revealing the data member itself
no input/output line in the class code, until and unless it is an UI class
names of class/interface in pascal-casing
class/interface name should be a noun
name of methods in camel-casing (except constructor)
method name should be a verb
name of data members in camel-casing (except constant)
data member name should be like an adjective/noun














	